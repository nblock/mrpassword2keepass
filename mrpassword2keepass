#!/usr/bin/python3
# Author: https://nblock.org
# License: GPLv3
"""
    MrPassword2Keepass

    Import passwords from a MrPassword site into Keepassx.
"""

# pylint: disable=no-member,too-few-public-methods

import argparse
import logging

import attr
import pykeepass
import requests
from parsel import Selector
from requests.compat import urljoin


def parse_args():
    """Parse commandline arguments."""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--mrpassword-url", required=True, help="the URL of the MrPassword site"
    )
    parser.add_argument(
        "--mrpassword-username",
        required=True,
        help="your username for the MrPassword site",
    )
    parser.add_argument(
        "--mrpassword-password",
        required=True,
        help="your password for the MrPassword site",
    )
    parser.add_argument(
        "--keepass-path", required=True, help="the path to the KeePass file"
    )
    parser.add_argument(
        "--keepass-password", default=None, help="the password of the KeePass file"
    )
    parser.add_argument(
        "--keepass-keyfile", default=None, help="the keyfile for the KeePass file"
    )
    return parser.parse_args()


@attr.s
class PasswordEntry:
    """Store the entries from a MrPassword password entry."""

    name = attr.ib()
    category = attr.ib()
    username = attr.ib()
    password = attr.ib()
    url = attr.ib(default=None)
    description = attr.ib(default=None)


@attr.s
class MrPassword:
    """MrPassword wrapper."""

    base_url = attr.ib()
    username = attr.ib()
    password = attr.ib()
    _session = attr.ib(default=attr.Factory(requests.Session))

    def login(self):
        """Login to the MrPassword site."""
        url = urljoin(self.base_url, "login/")
        data = dict(username=self.username, password=self.password, submit="")
        response = self._session.post(url, data=data, allow_redirects=False)
        response.raise_for_status()

        # For some reason the cookie is not extracted properly, so we avoid
        # redirects and extract the cookie immediately after authentication.
        cookie = {
            "name": "mrp_sid",
            "value": response.headers["Set-Cookie"].split(";")[0].split("=")[1],
        }
        self._session.cookies.set(**cookie)

    def find_personal_ids(self):
        """Find all valid personal record IDs."""
        return self._find_ids_by_scope()

    def find_global_ids(self):
        """Find all valid global record IDs."""
        return self._find_ids_by_scope("global")

    def fetch_personal_by_id(self, id_):
        """Fetch a personal password record by ID."""
        return self._fetch_by_id(id_)

    def fetch_global_by_id(self, id_):
        """Fetch a global password record by ID."""
        return self._fetch_by_id(id_, "global")

    def _find_ids_by_scope(self, scope=None):
        """Find all valid record IDs by scope."""
        overview_url = urljoin(self.base_url, "passwords/")
        if scope is not None:
            overview_url = urljoin(self.base_url, "passwords/{}".format(scope))
        response = self._session.get(overview_url)
        response.raise_for_status()
        sel = Selector(text=response.text)
        xpath_expr = '//a[@class="show_password"]/@id'
        if scope is not None:
            xpath_expr = '//a[@class="show_{}_password"]/@id'.format(scope)
        return [int(x) for x in sel.xpath(xpath_expr).re(r"id-(.*)")]

    def _fetch_by_id(self, id_, scope=None):
        """Fetch a password record by ID and scope."""
        entry_url = urljoin(self.base_url, "passwords/view/{}".format(id_))
        edit_snippet = "edit/{}".format(id_)
        if scope is not None:
            entry_url = urljoin(self.base_url, "passwords/view{}/{}".format(scope, id_))
            edit_snippet = "edit{}/{}".format(scope, id_)
        response = self._session.get(entry_url)
        response.raise_for_status()
        if edit_snippet not in response.text:
            return None

        sel = Selector(text=response.text)
        table = sel.xpath('//table[@class="table table-striped"]')
        return PasswordEntry(
            name=table.xpath(
                './/td[text()="Name"]/following-sibling::td/text()'
            ).extract_first(),  # NOQA
            category=table.xpath(
                './/td[text()="Category"]/following-sibling::td/text()'
            ).extract_first(),  # NOQA
            username=table.xpath(
                './/td[text()="Username"]/following-sibling::td/text()'
            ).extract_first(),  # NOQA
            password=table.xpath(
                './/td[text()="Password"]/following-sibling::td/text()'
            ).extract_first(),  # NOQA
            url=table.xpath(
                './/td[text()="URL"]/following-sibling::td/a/@href|/text()'
            ).extract_first(),  # NOQA
            description=table.xpath(
                './/td[text()="Description"]/following-sibling::td/text()'
            ).extract_first(),  # NOQA
        )


def main():
    """main"""
    args = parse_args()
    logging.basicConfig(level=logging.DEBUG)

    # Connect
    mrp = MrPassword(
        args.mrpassword_url, args.mrpassword_username, args.mrpassword_password
    )
    mrp.login()

    # Fetch personal and global password
    items = []
    personal_entry_ids = mrp.find_personal_ids()
    global_entry_ids = mrp.find_global_ids()
    for entry_id in personal_entry_ids:
        items.append(mrp.fetch_personal_by_id(entry_id))
    for entry_id in global_entry_ids:
        items.append(mrp.fetch_global_by_id(entry_id))

    # Store
    kpx = pykeepass.PyKeePass(
        args.keepass_path, password=args.keepass_password, keyfile=args.keepass_keyfile
    )
    for item in items:
        if item.category is None:
            kpx_group = kpx.root_group
        else:
            kpx_group = kpx.find_groups_by_name(item.category, first=True)
            if kpx_group is None:
                kpx_group = kpx.add_group(kpx.root_group, item.category)
        kpx.add_entry(
            kpx_group,
            item.name,
            item.username,
            item.password,
            url=item.url,
            notes=item.description,
        )

    # Done
    kpx.save()


if __name__ == "__main__":
    main()

# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4 smartindent autoindent
